"""Contains a migration that add analysis step and many to many rel with analysis"""
# Generated by Django 5.1.4 on 2024-12-19 18:55

import sys
import django.db.models.deletion
from django.db import migrations, models

from analysis.models.analysis import Analysis
from analysis.models.analysis_step import AnalysisStep


def add_steps(apps, schema_editor):
    """Add initial data to steps"""
    AnalysisStep.objects.create(name="Design", order=1)
    AnalysisStep.objects.create(name="Data Collation", order=2)
    AnalysisStep.objects.create(name="Data Preparation", order=3)
    description_step = AnalysisStep.objects.create(name="Description", order=4)
    explanation_step = AnalysisStep.objects.create(
        name="Explanation", mandatory=False, order=5
    )
    interpretation_step = AnalysisStep.objects.create(
        name="Interpretation", mandatory=False, order=6
    )
    anticipation_step = AnalysisStep.objects.create(
        name="Anticipation", mandatory=False, order=7
    )
    prescription_step = AnalysisStep.objects.create(
        name="Prescription", mandatory=False, order=8
    )
    AnalysisStep.objects.create(name="Communication", order=9)
    substeps = [
        {
            "name": "Trend analysis (requires data interval)",
            "step_parent": description_step,
            "order": 1,
        },
        {
            "name": "Information gap checklist",
            "step_parent": description_step,
            "order": 2,
        },
        {
            "name": "Key assumption checklist",
            "step_parent": description_step,
            "order": 3,
        },
        {"name": "Problem tree", "step_parent": explanation_step, "order": 1},
        {
            "name": "Multi-variate analysis (scatter plot)",
            "step_parent": explanation_step,
            "order": 2,
        },
        {
            "name": "Structured Brainstorming",
            "step_parent": explanation_step,
            "order": 3,
        },
        {
            "name": "Expert Judgement Elicitation",
            "step_parent": explanation_step,
            "order": 4,
        },
        {
            "name": "Prioritisation techniques (voting/ranking)",
            "step_parent": interpretation_step,
            "order": 1,
        },
        {
            "name": "Needs gaps analysis (requires targets/standards in analysis plan)",
            "step_parent": interpretation_step,
            "order": 2,
        },
        {
            "name": "Structured Brainstorming",
            "step_parent": interpretation_step,
            "order": 3,
        },
        {
            "name": "Expert Judgement Elicitation (survey)",
            "step_parent": interpretation_step,
            "order": 4,
        },
        {"name": "Confidence scale", "step_parent": interpretation_step, "order": 5},
        {
            "name": "Analytical value score",
            "step_parent": interpretation_step,
            "order": 6,
        },
        {
            "name": "Key assumption checklist",
            "step_parent": anticipation_step,
            "order": 1,
        },
        {"name": "Problem tree", "step_parent": anticipation_step, "order": 2},
        {"name": "Scenario planning", "step_parent": anticipation_step, "order": 3},
        {
            "name": "Structured Brainstorming",
            "step_parent": anticipation_step,
            "order": 4,
        },
        {
            "name": "Expert Judgement Elicitation (survey) + Delphi method",
            "step_parent": anticipation_step,
            "order": 5,
        },
        {
            "name": "Structured Expert Judgement (SEJ) - classical method",
            "step_parent": anticipation_step,
            "order": 6,
        },
        {"name": "Impact scale", "step_parent": anticipation_step, "order": 7},
        {"name": "Likelihood scale", "step_parent": anticipation_step, "order": 8},
        {
            "name": "Information gap checklist",
            "step_parent": prescription_step,
            "order": 1,
        },
        {
            "name": "Key assumption checklist",
            "step_parent": prescription_step,
            "order": 2,
        },
        {"name": "Problem tree", "step_parent": prescription_step, "order": 3},
        {
            "name": "Structured Brainstorming",
            "step_parent": prescription_step,
            "order": 4,
        },
        {
            "name": "Prioritisation techniques (voting/ranking)",
            "step_parent": prescription_step,
            "order": 5,
        },
        {
            "name": "Expert Judgement Elicitation (survey)",
            "step_parent": prescription_step,
            "order": 6,
        },
    ]
    for step in substeps:
        AnalysisStep.objects.create(**step)

    existing_analyses = Analysis.objects.all()
    mandatory_steps = AnalysisStep.objects.filter(
        models.Q(step_parent__isnull=True, mandatory=True)
        | models.Q(step_parent__mandatory=True, mandatory=True)
    )
    for analysis in existing_analyses:
        analysis.analysis_steps.set(mandatory_steps)


def remove_steps(apps, schema_editor):
    """Remove the initial steps"""
    existing_analyses = Analysis.objects.all()
    for analysis in existing_analyses:
        analysis.analysis_steps.clear()
    AnalysisStep.objects.all().delete()  # noqa: F821


class Migration(migrations.Migration):
    """Add analysis step and many to many rel with analysis"""

    dependencies = [
        ("analysis", "0003_alter_ids_add_initial_data"),
    ]

    operations = [
        migrations.RunSQL(
            "SET CONSTRAINTS ALL IMMEDIATE", reverse_sql=migrations.RunSQL.noop
        ),
        migrations.CreateModel(
            name="AnalysisStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField()),
                ("name", models.CharField()),
                ("mandatory", models.BooleanField(default=True)),
                (
                    "step_parent",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="analysis.analysisstep",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analysis Step",
                "verbose_name_plural": "Analyisis Steps",
                "db_table": "analysis_step",
            },
        ),
        migrations.AddField(
            model_name="analysis",
            name="analysis_steps",
            field=models.ManyToManyField(to="analysis.analysisstep"),
        ),
    ]

    if 'test' not in sys.argv:
        operations.append(
            migrations.RunPython(add_steps, remove_steps),
        )
    operations.append(
        migrations.RunSQL(
            migrations.RunSQL.noop, reverse_sql="SET CONSTRAINTS ALL IMMEDIATE"
        )
    )
