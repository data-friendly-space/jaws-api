name: development-pipeline

on:
  pull_request:
    types:
      - closed
    branches:
      - 'develop'
  push:
    branches:
      - 'gastonmastra-patch-1'
env:
  ECR_REGISTRY: ${{vars.ECR_REGISTRY}}
  DOCKER_IMAGE_NAME: jaws-api
  API_BUILD_NAME: jaws-api
  API_CLUSTER_NAME: jaws
  API_CONTAINER_NAME: jaws-api

jobs:
  build-api:
    runs-on: ubuntu-latest
    environment: Development
    strategy:
        matrix:
          python-version: ['3.12']
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

    #   - name: Cache node modules
    #     uses: actions/cache@v2
    #     env:
    #       cache-name: cache-node-modules
    #     with:
    #       path: ~/.npm
    #       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    #       restore-keys: |
    #         ${{ runner.os }}-build-${{ env.cache-name }}-
    #         ${{ runner.os }}-build-
    #         ${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build, tag, and push API image
        id: build_image_step
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_VERSION: ${{ github.sha }}
        run: |
          docker build --file ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-api:
    needs: build-api
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-dev.json
          container-name: ${{ env.API_BUILD_NAME }}
          image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.API_BUILD_NAME }}
          cluster: ${{ env.API_CLUSTER_NAME }}
